package main

import (
	"fmt"
	"os"
	"os/user"
	"strings"

	"github.com/briandowns/spinner"
)

func buildNDPProj(spinner *spinner.Spinner, conf []configLine) error {
	fmt.Println("NDP init")
	spinner.Start()
	currentUser, err := user.Current()
	if err != nil {
		spinner.Stop()
		return err
	}
	buildFlagsExist := false
	for _, line := range conf {
		if line.operation == "buildflags" {
			buildFlagsExist = true
			// .net moment
			if err := execCmd(true, append([]string{"/home/" + currentUser.Username + "/.dotnet/dotnet", "publish", "-c", "Release", "-r", "linux-x64", "-p:PublishSingleFile=true", "--self-contained", "true"}, line.args...)...); err != nil {
				spinner.Stop()
				return err
			}
		} else if line.operation == "verfmt" {
			ver, err := handleVerfmtLine(line)
			if err != nil {
				return err
			}
			name := "undefined"
			if dir, err := os.Getwd(); err != nil {

				return err
			} else {
				name = strings.Split(dir, "/")[len(strings.Split(dir, "/"))-1] // "name = split by / [len(split by /) - 1]" basically.
			}
			err = os.WriteFile("malino.generated.cs", []byte(
				"namespace"+name+" {\n"+
					"	public class MalinoAutoGenerated {\n"+
					"		public static string OSVersion = \""+ver+"\";\n"+
					"	}\n"+
					"}"), 0777)
			if err != nil {
				spinner.Stop()
				return err
			}
		}
	}
	if !buildFlagsExist {
		if err := execCmd(true, "/home/"+currentUser.Username+"/.dotnet/dotnet", "publish", "-c", "Release", "-r", "linux-x64", "-p:PublishSingleFile=true", "--self-contained", "true"); err != nil {
			spinner.Stop()
			return err
		}
	}
	spinner.Stop()
	return nil
}
